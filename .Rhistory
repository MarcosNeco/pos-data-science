db = "games_amazon",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234")
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
db = "games_amazon",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234")
mongo.is.connected(connection)
mongo.find.one(connection, "games_amazon.metadata", list(asin="B001UIT1UQ"))
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
mongo.find.one(connection, "games_amazon.metadata", list(asin="B001UIT1UQ"))
mongo.find.all(connection, "games_amazon.metadata")
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
mongo.find.all(connection, "games_amazon.metadata", limit = 100)
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
mongo.find.all(connection, "metadata", limit = 100)
mongo.find.all(connection, "metadata")
mongo.find.all(connection, ns = "metadata")
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
mongo.find.all(mongo = connection, ns = "metadata")
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
rs <-mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(rs)
mongo.find.all(mongo = rs, ns = "metadata")
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
mongo.find.all(mongo = connection, ns = "metadata")
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "metadata", query)
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon/metadata", query)
library("rmongodb")
connection <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(connection, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(connection)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon.metadata", query)
library("rmongodb")
mongo() <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
library("rmongodb")
mongo <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(mongo, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(mongo)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon.metadata", query)
library("rmongodb")
mongo <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(mongo, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(mongo)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon.metadata", query)
library("rmongodb")
mongo <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(mongo, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(mongo)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon.metadata", query)
library("rmongodb")
mongo <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(mongo, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(mongo)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon.metadata", query)
library("rmongodb")
mongo <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 1000)
mongo.authenticate(mongo, "pos_datascience", "pos1234", db = "games_amazon")
mongo.is.connected(mongo)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "asin", "B001UIT1UQ")
query <- mongo.bson.from.buffer(buf)
mongo.find.all(mongo = connection, ns = "games_amazon.metadata", query)
library("RMongo")
library("RMongo")
install.packages("RMongo")
library("RMongo")
library("RMongo")
mongo <- mongoDbConnect(dbName =  "games_amazon", host = "ds163705.mlab.com", port = "63705")
mongo.authenticate(mongo, "pos_datascience", "pos1234", db = "games_amazon")
library("RMongo")
mongo <- mongoDbConnect(dbName =  "games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(rmongo.object = mongo, username = "pos_datascience", password = "pos1234")
library("RMongo")
mongo <- mongoDbConnect(dbName =  "games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
library("RMongo")
mongo <- mongoDbConnect(dbName =  "games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
dbDisconnect(mongo)
library("RMongo")
mongo <- mongoDbConnect(dbName =  "games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
dbDisconnect(mongo)
library("RMongo")
mongo <- mongoDbConnect(dbName =  "games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
otp <- dbAggregate(mongo, "test_data", c(' { "$project" : { "baz" : "$foo" } } ',
' { "$group" : { "_id" : "$baz" } } ',
' { "$match" : { "_id" : "bar" } } '))
otp <- dbAggregate(mongo, "review", c(' { "$project" : { "baz" : "$foo" } } ',
' { "$group" : { "_id" : "$baz" } } ',
' { "$match" : { "_id" : "bar" } } '))
otp <- dbAggregate(mongo, "review", c(' { "$project" : { "baz" : "$asin" } } ',
' { "$group" : { "_id" : "$asin" } } ',
' { "$match" : { "_id" : "bar" } } '))
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect(host = "ds163705.mlab.com", port = "63705", dbName = "games_amazon")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon", host = "ds163705.mlab.com")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
dbAuthenticate(mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(rmongo.object =  mongo, username = "pos_datascience", password = "pos1234")
mongo <- mongoDbConnect("games_amazon", host = "ds163705.mlab.com", port = "63705")
dbAuthenticate(rmongo.object =  mongo, username = "pos_datascience", password = 'pos1234')
#leitura dos dados em formado json
library("rjson")
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
metadata <- mongo(collection = "metadata",
verbose = TRUE,
url = driver_connector)
price <- metadata$find(
fields ='{"asin":true, "price": true}',
limit = 1000
)
overall <- review$find(
fields = '{"asin":true, "overall":true}',
limit = 1000
)
price_overall = merge(price, overall, "asin")
length(price_overall$price)
#scatter.smooth(x=price_overall$price), y = abs(price_overall$overall))
#leitura dos dados em formado json
library("rjson")
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
metadata <- mongo(collection = "metadata",
verbose = TRUE,
url = driver_connector)
price <- metadata$find(
fields ='{"asin":true, "price": true}',
limit = 1000
)
overall <- review$find(
fields = '{"asin":true, "overall":true}',
limit = 1000
)
price_overall = merge(price, overall, "asin")
length(price_overall$price)
#scatter.smooth(x=price_overall$price), y = abs(price_overall$overall))
#leitura dos dados em formado json
library("rjson")
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
metadata <- mongo(collection = "metadata",
verbose = TRUE,
url = driver_connector)
price <- metadata$find(
fields ='{"asin":true, "price": true}',
limit = 10000
)
overall <- review$find(
fields = '{"asin":true, "overall":true}',
limit = 10000
)
price_overall = merge(price, overall, "asin")
length(price_overall$price)
#scatter.smooth(x=price_overall$price), y = abs(price_overall$overall))
price_overall = merge(price$asin, overall$asin, "asin")
price_overall = merge(price, overall, "asin")
length(price_overall$price)
head(overall)
head(overall)
head(overall$asin)
head(overall$asin)
overall <- review$lookup(
fields = '{"asin":true, "overall":true}',
limit = 10000
)
head(overall$asin)
overall <- review$lookup(
fields = '{"asin":true, "overall":true}',
limit = 10000
)
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
metadata <- mongo(collection = "metadata",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"review_metadata"
}
}]')
head(overall$asin)
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
metadata <- mongo(collection = "metadata",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"review_metadata"
}
}]')
length(review_metadata)
#scatter.smooth(x=price_overall$price), y = abs(price_overall$overall))
review_metadata$find({})
review_metadata$find()
review$find({})
review$find()
review$find(limit = 5000)
review_data <- review_con$find(limit = 5000)
review_con <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_data <- review_con$find(limit = 5000)
review_metadata <- review_data$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"review_metadata"
}
}]')
review_data <- review_con$find(limit = 5000)
review_metadata <- review_data$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"review_metadata"
}
}]')
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
length(review_metadata)
review_metadata <- review_data$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"review_metadata"
}
}]')
review_metadata <- review$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"review_metadata"
}
}]')
review_metadata <- review$aggregate('[{
"$lookup":{
"from":"metadata",
"localfield":"asin",
"foreingField":"asin",
"as":"metadata"
}
}]')
length(review_metadata)
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[{
"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreingField" : "asin",
"as" : "metadata"
}
}]')
length(review_metadata)
#scatter.smooth(x=price_overall$price), y = abs(price_overall$overall))
review_metadata <- review$aggregate('[{
"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "metadata"
}
}]')
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[{
"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "review_metadata"
}
{"$limit":"1500"}
}]')
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[{
"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "review_metadata"
},
{"$limit":"500"}
}]')
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[{
"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "review_metadata"
},
"$limit":{"500"}
}]')
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[
{"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "review_metadata"
}},
{"$limit":{"500"}}
]')
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[
{"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "review_metadata"
}},
{"$limit": 1000}
]')
#scatter.smooth(x=price_overall$price), y = abs(price_overall$overall))
scatter.smooth(x=review_metadata$price, y = review_metadata$overall, xlab = "Preço", ylab = "Nota")
scatter.smooth(x=review_metadata$price, y = review_metadata$overall, xlab = "Preço", ylab = "Nota")
head(review_metadata)
head(review_metadata)
str(review_metadata)
scatter.smooth(x=review_metadata$price, y = review_metadata$overall, xlab = "Preço", ylab = "Nota")
View(review_metadata)
View(review_metadata)
head(review_metadata$price)
head(review_metadata$price)
head(review_metadata$review_metadata$price)
head(review_metadata$review_metadata[0])
head(review_metadata$review_metadata[0][1])
head(review_metadata$review_metadata$price)
head(review_metadata$review_metadata$price)
head(review_metadata$)
head(review_metadata$review_metadata[1])
head(review_metadata$review_metadata[1][1])
View(review_metadata)
View(review_metadata)
head(review_metadata[1][1])
head(review_metadata[9][1])
head(review_metadata[9][1])
print(review_metadata[9][1])
print(review_metadata[9][1])
print(review_metadata[9][2])
print(review_metadata[9][2])
print(review_metadata[9][3])
#leitura dos dados em formado json
library("mongolite")
library("devtools")
driver_connector = "mongodb://pos_datascience:pos1234@ds163705.mlab.com:63705/games_amazon"
review <- mongo(collection = "review",
verbose = TRUE,
url = driver_connector)
review_metadata <- review$aggregate('[
{"$lookup":{
"from" : "metadata",
"localField" : "asin",
"foreignField" : "asin",
"as" : "review_metadata"
}},
{"$limit": 1000}
]')
print(review_metadata[9][1])
scatter.smooth(x=review_metadata$price, y = review_metadata$overall, xlab = "Preço", ylab = "Nota")
