mongo <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
mongo <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "familia1993",
db = "games_amazon")
mongo.is.connected(mongo)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
mongos <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongos)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
mongos <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongos)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "mongodb://ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "mongodb://ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "mongodb://ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = marcos_neco,
password = 041193,
db = "games_amazon")
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705/games_amazon",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705/games_amazon",
username = "marcos_neco",
password = "041193")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
db = "games_amazon")
mongo.is.connected(mongo = teste)
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "familia1993",
db = "games_amazon")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "'041193'",
db = "games_amazon")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",
db = "games_amazon")
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "MarcosNeco",
password = "familia1993",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "MarcosNeco",
password = "041193",
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",timeout = 10000
db = "games_amazon")
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",timeout = "10000"
db = "games_amazon")
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",timeout = 10000,
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
username = "marcos_neco",
password = "041193",timeout = 10000,
db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
teste <- mongo.create(host = "ds163705.mlab.com:63705",
timeout = 10000,
)
mongo.authenticate(teste, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(mongo = teste)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
mongo.find(connection, ns = "metadata", limit = 1)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
mongo.find(mongo = connection, ns = "metadata", limit = 1)
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
mongo.find(mongo = connection, ns = "metadata")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, out.width = "600px", out.height="400px")
Sys.setlocale("LC_ALL", "pt_BR")
library(tidyverse)
knitr::include_graphics("../images/tidyverse1.png")
knitr::include_graphics("../images/ceasa_outubro_31.png")
products_2yr <- read_rds("../data/products_2yr.rds.gz")
glimpse(products_2yr)
summary(products_2yr)
# Lembram das aulas anteriores?
products_2yr %>%
filter(produto == "ABACATE") ->
abacate
abacate %>%
# [1]
ggplot(mapping = aes(x=data, y=preco_med)) + # Reparem na mudança do operador!
# [2]
geom_point() ->
avocado_avg_price_over_time
print(avocado_avg_price_over_time)
ggplot(data = abacate, mapping = aes(x=data, y=preco_med)) +
geom_line()
avocado_avg_price_over_time <-
abacate %>%
ggplot(mapping = aes(x=data, y=preco_med)) +
geom_line() +
# Quebra principal (rótulos) no primeiro dia de cada mês, e quebra secundária a cada 14 dias
# Rótulo do eixo X é composto pelo nome abreviado do mês (%b) e o ano com 2 dígitos (%y)
scale_x_date(date_breaks = "1 month", date_minor_breaks = "2 weeks", date_labels = "%b/%y") +
# Variável quantitativa contínua, lembram?
scale_y_continuous( breaks = seq(from=0, to=8, by=.5), limits = c(0, 8)
, labels = function(y) format(y, nsmall = 2, decimal.mark = ","))
print(avocado_avg_price_over_time)
avocado_avg_price_over_time_minimal <-
avocado_avg_price_over_time +
# Este tema possui fundo branco, melhor visualizado em projeções
theme_minimal() +
# Aumento da fonte nos dois eixos e no título dos eixos
# Eixo X rotacionado em 90 graus para melhorar a exibição dos rótulos
theme( axis.text   = element_text(size = 13)
, axis.text.x = element_text(angle = 90, hjust = 1)
, axis.title  = element_text(size = 14))
print(avocado_avg_price_over_time_minimal)
product_prices_format <- list(
scale_x_date(date_breaks = "1 month", date_labels = "%b/%y"),
scale_y_continuous( breaks = seq(from=0, to=8, by=.5), limits = c(0, 8)
, labels = function(y) format(y, nsmall = 2, decimal.mark = ",")),
theme_minimal() +
theme( axis.text   = element_text(size = 13)
, axis.text.x = element_text(angle = 90, hjust = 1)
, axis.title  = element_text(size = 14)))
avocado_3_prices <-
ggplot(abacate, aes(x = data)) +
# Diferentes variáveis podem ser adicionadas em camadas de geometria independentes.
# As propriedades visuais podem ser informadas nas camadas de geometria
geom_line(aes(y = preco_min)) +
geom_line(aes(y = preco_med)) +
geom_line(aes(y = preco_max)) +
product_prices_format
print(avocado_3_prices)
avocado_3_prices <-
ggplot(abacate, aes(x = data)) +
# A geometria de Linha possui propriedades visuais para definição de cor e tipo de linha
# Constantes não podem ser informadas como mapping (aes) pois não são variáveis de um Data Frame
geom_line(aes(y = preco_min), color="darkgreen", linetype="dashed") +
geom_line(aes(y = preco_med)) +
geom_line(aes(y = preco_max), color="darkred", linetype="dashed") +
product_prices_format
print(avocado_3_prices)
abacate_price_types <-
abacate %>%
# Os nomes das variáveis passam a ser valores de uma variável chamada tipo
# Os valores correspondentes passam para a variável preco
# Só queremos modificar as colunas de preço
# s demais colunas (de produto até unidade de medida) e estacao devem ser preservadas
gather( key = tipo, value = preco, -c(produto:unid_medida, estacao) ) %>%
mutate( tipo = ordered( tipo, levels = c("preco_min", "preco_med", "preco_max")
, labels = c("Mínimo", "Médio", "Máximo")))
avocado_3_prices <-
# usando as propriedades visuais color e linetype, ambas mapeadas para a nova variável tipo
ggplot(data = abacate_price_types, mapping = aes(x=data, y=preco, color=tipo, linetype=tipo)) +
geom_line() +
# Neste caso fixei valores manualmente para as duas
# Escalas associadas às novas propriedades visuais (color e linetype)
scale_linetype_manual(values = c("dashed", "solid", "dashed")) +
scale_color_manual(values = c("darkred", "black", "darkgreen")) +
product_prices_format
print(avocado_3_prices)
avocado_3_prices <-
ggplot(abacate, aes(x = data, y = preco_med)) +
geom_linerange(aes(ymin = preco_min, ymax = preco_max), color = "gray", alpha=.2) +
geom_line(alpha = .4) +
geom_point(alpha = .3) +
product_prices_format
print(avocado_3_prices)
avocado_3_prices_texts <-
avocado_3_prices +
# Adicionei uma camada Estatística para suavização da sazonalidade. Vamos entrar em detalhes no dia 28/11
stat_smooth(method = "lm", formula = y ~ splines::bs(x, 8), se=FALSE, color="lightgrey", alpha = .1) +
labs( title    = "Preço médio do Kilograma de Abacate"
, subtitle = "Período de análise entre 21/03/2015 e 21/06/2017"
, caption  = "Fonte: CEASA/RS"
, x        = "Data"
, y        = "Preço Médio (em R$)")
print(avocado_3_prices_texts)
library(stringr)
bananas <- products_2yr %>% filter(str_detect(produto, "BANANA"))
bananas %>%
group_by(produto) %>%
# Uma outra forma de selecionar variáveis com dplyr. Outras formas estão descritas no help de starts_with
select(starts_with("preco")) %>%
# Esta é a forma que o dplyr fornece para aplicar uma série de funções em cada variável (as 3 variáveis de preço)
summarise_all( funs( min = min
# O ponto é utilizado para criar uma função anônima. Equivale a function(x) quantile(x, 0.25)
, q25 = quantile(., 0.25)
, median = median
, q75 = quantile(., 0.75)
, max = max
, mean = mean
, sd = sd)) %>%
# Vimos gather anteriormente
gather(stat, value, -produto) %>%
# separate cria 2 ou mais colunas, desmembrando o valor de uma coluna com separadores
separate(stat, into = c("const", "preco", "stat"), sep = "_") %>%
select(-const) %>%
# spread faz o oposto de gather. Os valores da coluna stat serão novas variáveis, e seus valores virão de value
spread(stat, value) %>%
mutate(preco = ordered(preco, levels = c("min", "med", "max"))) %>%
select(produto, preco, min, q25, median, q75, max, mean, sd) %>%
arrange(produto, preco) ->
banana_prices_stats
banana_prices_stats
banana_prices_stats %>%
ggplot(aes(x=produto)) +
# [1]
geom_bar(aes(y=mean, fill=produto), stat="identity", alpha=.6, color="black") +
# [2]
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width=.1) +
# [3]
facet_wrap(~ preco) ->
bananas_barplot
print(bananas_barplot)
banana_prices_stats %>%
mutate(preco = ordered(preco, labels = c("Mínimo", "Médio", "Máximo"))) %>%
mutate(produto = str_to_title(produto)) %>%
ggplot(aes(x=produto, y=mean, fill=produto)) +
geom_bar(stat="identity", alpha=.6) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width=.1) +
scale_y_continuous( breaks = seq(from=0, to=8, by=.5)
, labels = function(y) format(y, nsmall = 2, decimal.mark = ",")) +
facet_wrap(~ preco) +
labs( fill = "Produto"
, y = "Valor (em R$)"
, title = "Variação dos preços das bananas comercializadas na CEASA/RS"
, subtitle = "Preços Mínimo, Médio e Máximo. A linha vertical representa a variação em um desvio padrão."
, caption = "Fonte: CEASA/RS. Período de análise entre 21/03/2015 e 21/06/2017") +
theme( axis.title.x = element_blank()
, axis.text.x  = element_blank()
, axis.ticks.x = element_blank()
, axis.text = element_text(size = 12)
, axis.title = element_text(size = 12)
, legend.title = element_text(size = 12)
, legend.text = element_text(size = 11)
, strip.text = element_text(size = 12)) ->
bananas_barplot
print(bananas_barplot)
banana_prices_stats %>%
ggplot(aes(x=produto, y=median, fill=produto, colour=produto)) +
geom_bar(stat="identity", alpha=.6) +
geom_errorbar(aes(ymin = q25, ymax = q75), colour="black", width=.2) +
facet_wrap(~ preco) ->
bananas_barplot_median
print(bananas_barplot_median)
bananas %>%
select(produto, contains("preco")) %>%
gather(preco, valor, -produto) %>%
ggplot(aes(x=produto, y=valor, fill=produto)) +
stat_boxplot(alpha = .6) +
facet_wrap(~ preco) ->
bananas_boxplot
print(bananas_boxplot)
bananas %>%
select(produto, contains("preco")) %>%
gather(preco, valor, -produto) %>%
mutate(preco = ordered( preco, levels = c("preco_min", "preco_med", "preco_max")
, labels = c("Mínimo", "Médio", "Máximo"))) %>%
mutate(produto = str_to_title(produto)) %>%
ggplot(aes(x=produto, y=valor, fill=produto)) +
stat_boxplot(alpha = .6) +
scale_y_continuous( breaks = seq(from=0, to=8, by=.5), limits = c(0, 8)
, labels = function(y) format(y, nsmall = 2, decimal.mark = ",")) +
facet_wrap(~ preco) +
labs( fill = "Produto"
, y = "Valor (em R$)"
, title = "Boxplot de variação dos preços das bananas comercializadas na CEASA/RS"
, subtitle = "Preços Mínimo, Médio e Máximo."
, caption = "Fonte: CEASA/RS. Período de análise entre 21/03/2015 e 21/06/2017") +
theme( axis.title.x = element_blank()
, axis.text.x  = element_blank()
, axis.ticks.x = element_blank()
, axis.text = element_text(size = 12)
, axis.title = element_text(size = 12)
, legend.title = element_text(size = 12)
, legend.text = element_text(size = 11)
, strip.text = element_text(size = 12)) ->
banana_plot
print(banana_plot)
bananas %>%
select(produto, contains("preco")) %>%
gather(preco, valor, -produto) %>%
ggplot(aes(x=produto, y=valor, fill=produto)) +
stat_boxplot(alpha = .6, notch = TRUE) +
facet_wrap(~ preco) +
guides(fill = FALSE) +
# Camada de coordenadas. `flip` é a operação de inversão das coordenadas do sistema em uso.
coord_flip() ->
banana_plot
print(banana_plot)
products_2yr %>%
group_by(produto, estacao) %>%
summarise(mean(preco_med))
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
mongo.find(mongo = connection, ns = "metadata")
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
mongo.find(mongo = connection, ns = "games_amazon.metadata")
#leitura dos dados em formado json
library("rjson")
library("rmongodb")
library("devtools")
connection <- mongo.create(host = "ds163705.mlab.com:63705", timeout = 10000)
mongo.authenticate(connection, username = "marcos_neco",password = "041193", db = "games_amazon")
mongo.is.connected(connection)
mongo.find(mongo = connection, ns = "review")
